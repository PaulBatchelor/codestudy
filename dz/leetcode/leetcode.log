@2025-01-13#codestudy/leetcode/425

@18:45 Looking at backtracking
#! dz codestudy/leetcode/425/files/backtracking.py
This is the first editorial solution. It said it
would trigger a TLE, but it didn't trigger on my
first submission. So it seems good enough. I'm studying
it first.

@20:21 Grokking getWordsWithPrefix
#! dz codestudy/leetcode/425/files/backtracking.py/solution_class/getWordsWithPrefix
#! dz python/docs/reference/expressions/yield
#! dz rust/std/iter

This one is very pythonic, since it is making use of
generator syntax and yield(). My assumption here is that
it's a little more efficient than making an array.
---
A generator is a bit like an iterator in Rust in this context.
We are building a list of words that have a particular
prefix. instead of making a list and iterating through
the list, the generator skips the list-making
process and just goes to the iterating bit.

@20:45 Conclusions on backtracking algorithm today
#! dz codestudy/leetcode/425/files/backtracking.py
#! dz codestudy/leetcode/425/files/2025_01_10.py
I've now done a fairly comprehenisve dive into
the editorial naive backtracking solution and my own
solution. The underlying question I wanted to answer
was: why does mine TLE and their solution doesn't?
My guess is that the inner loop was more optimized,
making used of generators and yield syntax.

@2025-01-16#codestudy/leetcode/110

@10:46 Setup
#! dz codestudy/leetcode/110/files/2025_01_16.py
Still figuring out how to manage this codestudy infra

@11:01 Added editorial solution
#! dz codestudy/leetcode/110/files/editorial_top_down.py

@11:12 Negative one return value makes me think a bit
#! dz codestudy/leetcode/110/files/editorial_top_down.py/height_function/return_negative_one_on_empty_tree 
#! dz codestudy/leetcode/110/files/editorial_top_down.py/height_function/return_max_height_plus_one
I think looking at the return statement makes things clearer
maybe? This code is always adding 1 to the max result.
A height of zero will happen if there are no child nodes.
If there is one child node the height will be at least 1,
as the result will always be positive (zero inclusive).

